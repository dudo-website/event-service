// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Event struct {
	ID string `json:"id"`
}

// @oneOf these inputs...
type EventData struct {
	Tech  *TechAttributes  `json:"tech"`
	Skill *SkillAttributes `json:"skill"`
}

type NewEvent struct {
	AggregateID string     `json:"aggregateID"`
	Type        EventType  `json:"type"`
	Data        *EventData `json:"data"`
}

type SkillAttributes struct {
	Name       string `json:"name"`
	Proficient bool   `json:"proficient"`
}

type TechAttributes struct {
	Text     string  `json:"text"`
	PhotoURL *string `json:"photo_url"`
}

type EventType string

const (
	EventTypeCreate EventType = "CREATE"
	EventTypeUpdate EventType = "UPDATE"
	EventTypeDelete EventType = "DELETE"
)

var AllEventType = []EventType{
	EventTypeCreate,
	EventTypeUpdate,
	EventTypeDelete,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeCreate, EventTypeUpdate, EventTypeDelete:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
